* Basic Personal Configuration
** Change =Yes-OR-No= to =y-or-n=
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Remove Toolbar Mode, Scrollbar Mode, Menubar Mode 
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
#+END_SRC
** Emasc Lisp code adding shortcut
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
		   '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Config.org loading shortcut
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Reload emacs shortcut
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    "Reloads ~/.emacs.d/config.org at runtime"
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Startup Screen
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-message t)
#+END_SRC
** Expand Region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :config 
    (global-set-key (kbd "C-=") 'er/expand-region))
#+END_SRC
** Add Default Browser
#+BEGIN_SRC emacs-lisp
  (setenv "BROWSER" "firefox")
#+END_SRC
* Org Mode
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
      (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Theme And Modeline
** theme
#+BEGIN_SRC emacs-lisp
  (use-package zenburn-theme
    :ensure t)
#+END_SRC
** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (spaceline-spacemacs-theme))
#+END_SRC
* Magit
** Default magit package
#+BEGIN_SRC emacs-lisp
  (use-package magit
      :ensure t
      :init
      (progn
      (bind-key "C-x g" 'magit-status)))
  (setq magit-status-margin
    '(t "%Y-%m-%d %H:%M " magit-log-margin-width t 18))
#+END_SRC
** Git Time Machine and git gutter
#+BEGIN_SRC emacs-lisp
  (use-package git-timemachine
    :ensure t)
  (use-package git-gutter
    :ensure t
    :init
    (global-git-gutter-mode +1))

#+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook))
#+END_SRC
* Projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1)
    (setq dashboard-items '((recents  . 5)
			    (projects . 5)
			    (agenda . 5))))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
      (use-package yasnippet-snippets
	:ensure t)
      (yas-reload-all))
#+END_SRC
* Which Key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t 
    :config
    (which-key-mode))
#+END_SRC
* Swiper / Ivy / Counsel
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :bind
    (("M-y" . counsel-yank-pop)
     :map ivy-minibuffer-map
     ("M-y" . ivy-next-line)))


  (use-package ivy
    :ensure t
    :diminish (ivy-mode)
    :bind (("C-x b" . ivy-switch-buffer))
    :config
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "%d/%d ")
    (setq ivy-display-style 'fancy))


  (use-package swiper
    :ensure t
    :bind (("C-s" . swiper-isearch)
	   ("C-r" . swiper-isearch)
	   ("C-c C-r" . ivy-resume)
	   ("M-x" . counsel-M-x)
	   ("C-x C-f" . counsel-find-file))
    :config
    (progn
      (ivy-mode 1)
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC
